Problem Statement :
1044. Longest Duplicate Substring (LEETCODE - HARD)

Given a string s, consider all duplicated substrings: (contiguous) substrings of s that occur 2 or more times. 
The occurrences may overlap.

Return any duplicated substring that has the longest possible length. 
If s does not have a duplicated substring, the answer is "".

Example 1:
Input: s = "banana"
Output: "ana"
Explanation: The answer is "ana", with the length of 3 because "ana" is repeated twice at index 1,3.

Example 2:
Input: s = "abcd"
Output: ""
Explanation: The answer is empty string ("") as there is no duplicate substring

Solution Explanation :-

We can solve this problem by using Rolling Hash with Binary Search

Since the length of the answer is in between 0 to the length of string minus 1, 
In the example one "banana", the answer is in between 0 to 5,

If we find k length substring is repeated then ans will always be greater than k 
else ans will always be less than k 
In this way we can reduced the search space.

Now for checking the duplicate string we can use Rolling Hash
For every k length substring calc the hash if it is previously computed then we can return true here

Time Complexity - O(NlogN)
Space Complexity - O(N)